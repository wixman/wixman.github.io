#ifdef GL_ES
precision highp float;
#endif
#extension GL_OES_standard_derivatives : enable
// shadertoy compatible uniforms
uniform float     iGlobalTime;
uniform vec3	  iResolution;

// my uniforms
uniform vec3	  iCamPos;
uniform vec3	  iCamFwd;
uniform vec3	  iCamUp;
uniform bool      iNotST;

vec3   camRight = cross(iCamFwd, iCamUp);
float  _zNear  = 0.0; // Near plane distance from camera
float  _zFar = 15.0; // Far plane distance from camera
float  _focalLength = 1.67; // Distance between eye and image-plane

float d1;
float d2;

// our rotation matrix for the animated cube
mat3 m = mat3(cos(iGlobalTime * 0.6), 0.0, sin(iGlobalTime * 0.6),
			  0.0, 1.0, 0.0,
			  -sin(iGlobalTime * 0.6), 0.0, cos(iGlobalTime * 0.6) );        


// return maximum component of a vector
float maxcomp(in vec3 p ) 
{ 
	return max(p.x,max(p.y,p.z));
}

// create a signed distance field of a box
float sdBox( vec3 p, vec3 b )
{
  vec3  di = abs(p) - b;
  float mc = maxcomp(di);
  return min(mc,length(max(di,0.0)));
}

vec4 map(vec3 p )
{
    float d = sdBox( p, vec3(1.0) );

	vec4 res = vec4(d, 1.0, 0.0, 0.0);

    float s = 1.0; // initialize scale to zero
    
    for( int m=0; m<6; m++ )
    {
        vec3 a = mod( p*s, 2.0 )-1.0; // repeat
        s *= 3.0; // shrink cross every iteration
        vec3 r = abs(1.0 - 3.0*abs(a));
        float da = max(r.x,r.y);
        float db = max(r.y,r.z);
        float dc = max(r.z,r.x);
        float c = (min(da,min(db,dc))-1.0)/s;

        if( c>d )
        {
          d = c;
		  // X component is distance
		  // Y component is occlusion
		  res = vec4( d, min(res.y, 0.2*da*db*dc), (1.0+float(m))/4.0, 0.0);
        }
    }

    return res;
}


vec4 intersect(vec3 ro, vec3 rd)
{
    float t = 0.0; // marching distance
	vec4 res = vec4(-1.0);	
	vec4 h = vec4(1.0);

	// create 3x3 rotation matrix
    for(int i = 0; i < 64; ++i)
    {
		if( h.x < 0.005 || t > 10.0 ) 
			break;
		
		vec3 p = ro + rd * t; // our position along the ray
        // p *= m; // rotate lookup position
                
        h = map(p);
		res = vec4(t, h.yzw);
        t += h.x; 
	}
   
	if( t > 10.0 )
		res = vec4(-1.0);

    return res;
}


vec3 calcNormal(in vec3 p)
{
    vec3 eps = vec3(.001,0.0,0.0);
    vec3 n;
    n.x = map(p+eps.xyy).x - map(p-eps.xyy).x;
    n.y = map(p+eps.yxy).x - map(p-eps.yxy).x;
    n.z = map(p+eps.yyx).x - map(p-eps.yyx).x;
    return normalize(n);
}


float softshadow( in vec3 ro, in vec3 rd, float mint, float k )
{
    float res = 1.0;
    float t = mint;
	float h = 1.0;
    for( int i=0; i<32; i++ )
    {
		// raymarch along the light vector
        h = map(ro + rd*t).x;
        res = min( res, k*h/t );
		t += clamp( h, 0.005, 0.1 );
    }
    return clamp(res,0.0,1.0);
}


vec3 sunDir = normalize(vec3(0.93, 1.0, -1.5));

vec3 render(in vec3 ro, in vec3 rd)
{
	// background gradient based on normalized y component of ray direction
	vec3 col = mix(vec3(0.0, 1.0, 0.0), vec3(1.0, 0.0, 0.0), 0.5 + 0.5 * rd.y * 2.0);  
	vec4 tmat = intersect(ro, rd);
	
	if( tmat.x > 0.0 )
	{
		vec3 p = ro + tmat.x * rd; // sample position in space
		float occ = tmat.y;
		float sha = softshadow(p, sunDir, 0.01, 1.0);
		// p *= m;
		vec3 n = calcNormal(p); 

		col = abs(n) * occ * sha;
	}

	return col;
}


void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
	vec2 uvn = fragCoord.xy / iResolution.xy; // 0 to 1 position
    vec2 uv = uvn * 2.0 - 1.0;  // transform coordinates to -1 to 1
    uv.x *= iResolution.x / iResolution.y;
    
    // ray direction
	vec3 rd = normalize(iCamFwd * _focalLength + (camRight * uv.x + iCamUp * uv.y));                  
	vec3 ro = iCamPos;
    

	vec3 col = render(ro, rd);

	vec4 color = vec4(col, 1.0);
	
    // simple fog style rendering
    /*float fog = 1.0 / (1.0 + t * t * 0.5);*/
    
    // vignette  
	float OuterVig = 1.0; // Position for the Outer vignette
	float InnerVig = 0.05; // Position for the inner Vignette Ring
	vec2 center = vec2(0.5, 0.5); // Center of Screen
	float dist  = distance(center, uvn) * 1.414213; // Distance  between center and the current Uv. 
	float vig = clamp((OuterVig-dist) / (OuterVig-InnerVig), 0.0, 1.0); 
	vec4 vigColor = vec4(0.062745, 0.031372, 0.02353, 1.0);

	/*vec4 color = vec4(fog * 1.7, fog * 1.2, fog * 1.3, 1.0);*/
    fragColor = mix(color, vigColor, 1.0 - vig);
    
}


// stuff above to make it shadertoy compatible
void main( void ){
	vec4 color = vec4(0.0,0.0,0.0,1.0);
	mainImage( color, gl_FragCoord.xy );
	color.w = 1.0;
	gl_FragColor = color;
}	
